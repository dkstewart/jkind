type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__sensors(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  env_temp : int;
  time : real;
  temp_read : int;
  temp_high : bool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  freshVar2 : bool;
  freshVar1 : bool;
  freshVar0 : bool;
let
  __GUARANTEE0 = freshVar0;

  __ASSERT = ((__ASSUME__HIST => __GUARANTEE0) and (__ASSUME0 = ((env_temp > 0) and (env_temp < 10))));

  freshVar2 = (env_temp = temp_read);

  freshVar1 = ((env_temp > 8) = temp_high);

  freshVar0 = (freshVar1 and freshVar2);

  --%IVC freshVar2, freshVar1, __GUARANTEE0;

tel;

node main(
  sensors__temp_read : int;
  sensors__temp_high : bool;
  sensors____ASSUME0 : bool;
  sensors____ASSUME__HIST : bool;
  temp_sensor_high : bool;
  pressure_sensor_high : bool;
  sensors__env_temp : int;
  sensors__time : real;
  env_temp : int;
  time : real
) returns (

);
var
  __ASSUME0 : bool;
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
let
  --%MAIN;
  __ASSUME0 = ((env_temp > 0) and (env_temp < 10));

  __ASSUME__HIST = (sensors____ASSUME__HIST and true);

  __GUARANTEE0 = ((env_temp > 8) = temp_sensor_high);

  assert __ASSUME0;

  assert (time = sensors__time);

  assert _TOP__sensors(sensors____ASSUME__HIST, sensors____ASSUME0, sensors__env_temp, sensors__time, sensors__temp_read, sensors__temp_high);

  assert (sensors____ASSUME__HIST = __HIST(sensors____ASSUME0));

  assert (env_temp = sensors__env_temp);

  assert (sensors__temp_high = temp_sensor_high);

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  --%PROPERTY sensors____ASSUME0;
  --%PROPERTY __ASSUME__HIST;
  --%PROPERTY __GUARANTEE0;

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

